name: CI构建
on:
  push:
    branches: [ main,master ]
  pull_request:
    branches: [ main ,master ] # merge到main分支时触发部署

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: x-http-framework
    steps:
      - name: 检出代码
        uses: actions/checkout@master

      - name: 设置环境 Golang 环境
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: 构建 BuiLd
        run: |
          export GOPROXY=https://goproxy.io,direct
          go build -o ${{ env.x-http-framework }}
          ls

      - name: upx 压缩二进制文件
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: |
            ${{ env.x-http-framework }}
          args: -fq

      - name: 同步文件
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: -avzr --delete
          path: ./${{ env.x-http-framework }}
          remote_path: /micro-server/
          remote_host: ${{ secrets.Host }}
          remote_port: 22
          remote_user: root
          remote_key: ${{ secrets.DeploySecret }} # 请使用 ssh-keygen -t rsa 生成秘钥对,然后将公钥拷贝到要操纵的目标器的/root/.ssh/authorized_keys里,再把私钥黏贴到 github 后台的secret里
